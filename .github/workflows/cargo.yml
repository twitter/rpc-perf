name: CI

on: [ push, pull_request ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full

jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-20.04, macos-10.15 ]
        profile: [ release, debug ]
    name: build-${{ matrix.os }}-${{ matrix.profile }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Update cargo flags
        if: ${{ matrix.profile == 'release' }}
        run: echo 'CARGO_FLAGS=--release' >> $GITHUB_ENV
        shell: bash
      - name: Update cargo flags
        if: ${{ matrix.profile == 'debug' }}
        run: echo 'CARGO_FLAGS=' >> $GITHUB_ENV
        shell: bash

      - uses: Swatinem/rust-cache@v1
        with:
          key: ${{ matrix.profile }}
      - uses: actions-rs/cargo@v1
        name: build
        with:
          command: test
          args: ${{ env.CARGO_FLAGS }} --workspace --tests --bins --examples --no-run
      - uses: actions-rs/cargo@v1
        name: test
        with:
          command: test
          args: ${{ env.CARGO_FLAGS }} --workspace --tests --bins --examples

  # Fast clippy check to ensure things compile
  check:
    strategy:
      matrix:
        os: [ ubuntu-20.04, macos-10.15 ]
    name: check-${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v1
      - uses: actions-rs/cargo@v1
        with:
          command: check
          args: --release

  rustfmt:
    name: rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  # Note: We could run these using the pull_request_target trigger. I haven't
  #       done this since I'm not sure if it would be secure.
  #
  # See this link for more details on this
  # https://securitylab.github.com/research/github-actions-preventing-pwn-requests/
  clippy:
    name: clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  # Note: temporarily disabled due to transitive dependency on chrono
  # TODO(bmartin): re-enable when this will pass
  #
  # audit:
  #   name: audit
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions-rs/audit-check@v1
  #       with:
  #         token: ${{ secrets.GITHUB_TOKEN }}

  memcache-smoketest:
    name: memcache smoketest
    runs-on: ubuntu-18.04
    services:
      memcached:
        image: memcached
        ports: 
          - 11211:11211        
    steps:
      - uses: actions/checkout@v2
      - uses: Swatinem/rust-cache@v1
      - name: Build
        run: cargo build --release
      - name: Smoketest
        run: target/release/rpc-perf configs/memcache.toml

  exposition-smoketest:
    name: exposition smoketest
    runs-on: ubuntu-18.04
    services:
      memcached:
        image: memcached
        ports:
          - 11211:11211
    steps:
      - uses: actions/checkout@v2
      - uses: Swatinem/rust-cache@v1
      - name: Build
        run: cargo build --release
      - name: Run
        run: target/release/rpc-perf configs/memcache.toml &
      - name: Validate
        run: sleep 60 && curl -s http://localhost:9090/vars.json | jq '.' > /dev/null

  redis-smoketest:
    name: redis smoketest
    runs-on: ubuntu-18.04
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v2
      - uses: Swatinem/rust-cache@v1
      - name: Build
        run: cargo build --release
      - name: Smoketest
        run: target/release/rpc-perf configs/redis.toml

  redis-resp-smoketest:
    name: redis resp smoketest
    runs-on: ubuntu-18.04
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v2
      - uses: Swatinem/rust-cache@v1
      - name: Build
        run: cargo build --release
      - name: Smoketest
        run: target/release/rpc-perf configs/redis_resp.toml

  pelikan-pingserver-smoketest:
    name: pelikan pingserver smoketest
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
            path: rpc-perf
      - uses: Swatinem/rust-cache@v1
      - name: Checkout Pelikan
        uses: actions/checkout@v2
        with:
          repository: twitter/pelikan
          path: pelikan
      - name: Build Pelikan
        run: cd pelikan && cargo build --release
      - name: Build rpc-perf
        run: cd rpc-perf && cargo build --release
      - name: Run Pelikan Pingserver
        run: pelikan/target/release/pelikan_pingserver_rs &
      - name: Smoketest
        run: rpc-perf/target/release/rpc-perf rpc-perf/configs/ping.toml

  pelikan-segcache-smoketest:
    name: pelikan segcache smoketest
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
            path: rpc-perf
      - uses: Swatinem/rust-cache@v1
      - name: Checkout Pelikan
        uses: actions/checkout@v2
        with:
          repository: twitter/pelikan
          path: pelikan
      - name: Build Pelikan
        run: cd pelikan && cargo build --release
      - name: Build rpc-perf
        run: cd rpc-perf && cargo build --release
      - name: Run Pelikan Segcache
        run: pelikan/target/release/pelikan_segcache_rs &
      - name: Smoketest
        run: rpc-perf/target/release/rpc-perf rpc-perf/configs/pelikan.toml

  pelikan-segcache-tls-smoketest:
    name: pelikan segcache tls smoketest
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
            path: rpc-perf
      - uses: Swatinem/rust-cache@v1
      - name: Checkout Pelikan
        uses: actions/checkout@v2
        with:
          repository: twitter/pelikan
          path: pelikan
      - name: Fetch step-cli
        run: curl -O -L https://dl.step.sm/gh-release/cli/docs-cli-install/v0.18.0/step-cli_0.18.0_amd64.deb
      - name: Install step-cli
        run: sudo dpkg -i step-cli_0.18.0_amd64.deb
      - name: Generate Root CA
        run: step certificate create --profile root-ca "Root CA" root_ca.crt root_ca.key --no-password --insecure
      - name: Install Root CA
        run: sudo step certificate install root_ca.crt
      - name: Generate Intermediate CA
        run: step certificate create "Intermediate CA" intermediate_ca.crt intermediate_ca.key --profile intermediate-ca --ca ./root_ca.crt --ca-key ./root_ca.key --no-password --insecure
      - name: Generate Trust Chain
        run: cat intermediate_ca.crt > trust.chain && cat root_ca.crt >> trust.chain
      - name: Generate Client Cert and Key
        run: step certificate create client client.crt client.key --ca ./intermediate_ca.crt --ca-key ./intermediate_ca.key --bundle --no-password --insecure
      - name: Generate Server Cert and Key
        run: step certificate create server server.crt server.key --ca ./intermediate_ca.crt --ca-key ./intermediate_ca.key --bundle --no-password --insecure
      - name: Build Pelikan
        run: cd pelikan && cargo build --release
      - name: Build rpc-perf
        run: cd rpc-perf && cargo build --release
      - name: Configure Pelikan Segcache
        run: |
          echo 'certificate_chain = "trust.chain"' >> pelikan/config/segcache.toml
          echo 'certificate = "server.crt"' >> pelikan/config/segcache.toml
          echo 'private_key = "server.key"' >> pelikan/config/segcache.toml
      - name: Run Pelikan Segcache
        run: pelikan/target/release/pelikan_segcache_rs &
      - name: Configure rpc-perf
        run: |
          echo '[tls]' >> rpc-perf/configs/pelikan.toml
          echo 'verify = false' >> rpc-perf/configs/pelikan.toml
          echo 'certificate_chain = "trust.chain"' >> rpc-perf/configs/pelikan.toml
          echo 'certificate = "client.crt"' >> rpc-perf/configs/pelikan.toml
          echo 'private_key = "client.key"' >> rpc-perf/configs/pelikan.toml
      - name: Final rpc-perf config
        run: cat rpc-perf/configs/pelikan.toml
      - name: Smoketest
        run: rpc-perf/target/release/rpc-perf rpc-perf/configs/pelikan.toml
