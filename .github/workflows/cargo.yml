on: [ push, pull_request ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full

jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-20.04, macos-10.15 ]
        profile: [ release, debug ]
    name: build-${{ matrix.os }}-${{ matrix.profile }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Update cargo flags
        if: ${{ matrix.profile == 'release' }}
        run: echo 'CARGO_FLAGS=--release' >> $GITHUB_ENV
        shell: bash
      - name: Update cargo flags
        if: ${{ matrix.profile == 'debug' }}
        run: echo 'CARGO_FLAGS=' >> $GITHUB_ENV
        shell: bash

      - uses: Swatinem/rust-cache@v1
        with:
          key: ${{ matrix.profile }}
      - uses: actions-rs/cargo@v1
        name: build
        with:
          command: test
          args: ${{ env.CARGO_FLAGS }} --workspace --tests --bins --examples --no-run
      - uses: actions-rs/cargo@v1
        name: test
        with:
          command: test
          args: ${{ env.CARGO_FLAGS }} --workspace --tests --bins --examples

  # Fast clippy check to ensure things compile
  check:
    strategy:
      matrix:
        os: [ ubuntu-20.04, macos-10.15 ]
    name: check-${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v1
      - uses: actions-rs/cargo@v1
        with:
          command: check
          args: --release

  rustfmt:
    name: rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  # Note: We could run these using the pull_request_target trigger. I haven't
  #       done this since I'm not sure if it would be secure.
  #
  # See this link for more details on this
  # https://securitylab.github.com/research/github-actions-preventing-pwn-requests/
  clippy:
    name: clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  audit:
    name: audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  memcache-smoketest:
    name: memcache smoketest
    runs-on: ubuntu-18.04
    services:
      memcached:
        image: memcached
        ports: 
          - 11211:11211        
    steps:
      - uses: actions/checkout@v2
      - uses: Swatinem/rust-cache@v1
      - name: Build
        run: cargo build --release
      - name: Smoketest
        run: target/release/rpc-perf configs/memcache.toml

  exposition-smoketest:
    name: exposition smoketest
    runs-on: ubuntu-18.04
    services:
      memcached:
        image: memcached
        ports:
          - 11211:11211
    steps:
      - uses: actions/checkout@v2
      - uses: Swatinem/rust-cache@v1
      - name: Build
        run: cargo build --release
      - name: Run
        run: target/release/rpc-perf configs/memcache.toml &
      - name: Validate
        run: sleep 60 && curl -s http://localhost:9090/vars.json | jq '.' > /dev/null

  redis-smoketest:
    name: redis smoketest
    runs-on: ubuntu-18.04
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v2
      - uses: Swatinem/rust-cache@v1
      - name: Build
        run: cargo build --release
      - name: Smoketest
        run: target/release/rpc-perf configs/redis.toml

  redis-resp-smoketest:
    name: redis resp smoketest
    runs-on: ubuntu-18.04
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v2
      - uses: Swatinem/rust-cache@v1
      - name: Build
        run: cargo build --release
      - name: Smoketest
        run: target/release/rpc-perf configs/redis_resp.toml

  pelikan-pingserver-smoketest:
    name: pelikan pingserver smoketest
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - uses: Swatinem/rust-cache@v1
        with:
          path: rpc-perf
      - name: Checkout Pelikan
        uses: actions/checkout@v2
        with:
          repository: twitter/pelikan
          path: pelikan
      - name: Build Pelikan
        run: cd pelikan && cargo build --release
      - name: Build rpc-perf
        run: cd rpc-perf && cargo build --release
      - name: Run Pelikan Pingserver
        run: pelikan/target/release/pelikan_pingserver_rs &
      - name: Smoketest
        run: rpc-perf/target/release/rpc-perf configs/ping.toml

